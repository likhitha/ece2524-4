// To view these instructions in glorious color, run the 'viewme' command in the same directory 
// e.g. If % is your prompt: 
// % ./viewme 
-----Part 0-----
***Introduction

**All file names used in this document that are not explicitly relative 
**to the system root ('/') or the current user's home directory
**are relative to the root directory of the archive which this file is a 
**part of (i.e. ece2524midterm). This README file is in the root directory of the archive.

***For each section, start recording a transcript with the script command.  Name it part# 
***where # is the section number.  At the end of the section press Ctrl+D to stop recording and 
***save that file

*You do not need to record session transcripts for the script-writing part

*If you can't come up with a command that gives exactly what is asked, get as close as you can*

*To make it easier for me to find your answers in recorded transcripts: 
*1) Only use utilities like 'man' and 'nano' that write to the entire terminal window in a session other than the one you are recording the transcript in
*   (this could be in a separate window, or a separate virtual pane using tmux)
*2) Please copy and paste your final command from your working terminal into your RESPONSE.txt file after the >> prompt for the question.

-----Part 1-----
(5 points)
***Setup
1.1) Confirm that your current working directory is 'ece2524midterm'
1.2) Create a new directory called 'output'
1.3) *copy* the file ['README.txt'] to a new file called ['RESPONSE.txt'] in the ['output'] 
directory.  Record the answers to questions contained in this exam in that file. Do *not* modify the original 'README' file.
1.4) Stop recording this session by pressing 'Ctrl+D'

-----Part 2-----
(4 points)
***History and philosophy
**Answer the following questions in your RESPONSE.txt file right after the >> prompt
**No transcript file is necessary for this section
2.1) Unix was originally developed at
A. Apple Inc.
B. Microsoft
C. AT&T/Bell Labs
D. Texas Instruments
E. None of the above
>> B
##DKM C, (-2)

2.2) The Unix shell serves as an interface between
A. System hardware and the kernel
B. System hardware and the user
C. The user and the kernel
D. None of the above
>> C

-----Part 3-----
(6 points)
***Filesystem
3.1) Run a command that finds all hidden files in the ['sample'] directory
>>
3.2) Create a symbolic link to the file ['files/moby.txt'] in the ['output'] directory

-----Part 4-----
(10 points)
***grep, sed and regular expressions

**using the file 'files/testdata' as input:
4.1) Run a command that searches the lines of all hidden files in the ['sample'] directory for the word 'secrets', printing out any lines found.
**Hint: see 3.1

4.2) Run a command that replaces whole words ending in 'le' (that's a lower case 'L' 'e') on *each* line of input with the digit '0'
>>
##DKM no submission (-2)

**using the file 'files/moby.txt' as input
4.3) Run a command which prints the line number and the line itself on which the phrase
"Samuel Enderby is the name" occurs on?
>>

4.4) Amend the previous command so the the final output is the number of *words* on the line containing the phrase "My wrist is sprained"
>>

4.5) Run the previous command again, but direct the output to a file called ['output/the.answer']
>>

-----Part 5-----
(20 points)
bash and python scripts 
***for any scripts that you create, set the permission bits on the
***files so that they are executable by the owner
**No transcript file is necessary for this section

5.1) 
##DKM close (-1)
The script ['viewme'] in the base directory of this archive displays this README file with color highlighting.  However, the name of the file is hard-coded in the script.  Modify the ['viewme'] script to accept a single command line argument that is assumed to be a file name.  If the file name exists and is readable, then ['viewme'] should display the file like it currently does the README.txt.  If the file given on the command line does *not* exist, then ['viewme'] should print a suitable message to *standard error* and exist with status 1.

5.2) The file ['bin/myprog.py'] has some errors and does not run.  Correct the errors so that it 
runs correctly.  You may overwrite the original file and keep the corrected version in the 
['bin'] directory. (If you want to test the output use ['file/account'] directed to standard input. You do not need to record this command or the output, it is for your purposes only.)

5.3) Take a look at the file ['files/grades.csv'].  It contains numeric grades for some imaginary students.  Each line in the file represents one student and contains a field for an alphanumeric ID string, last name, first name and grade (4 fields per line).  Fields are separated by commas. Spaces may occur in either the first or last name field.

Write a python script called ['change_grade.py'] that will take two command line arguments: a string and a number, and read input formatted like ['files/grades.csv'] from standard input.  If the string supplied on the command line is found anywhere on a line of input, then the grade on that line should be changed to that number and the modified line printed to standard out.  Lines that do not match the string should be printed back to standard out unchanged. Here's an example usage:

% ./change_grade.py Nye 80 <files/grades.csv
#grades for Super Awesome Demonstration

jshmoe,Shmoe,Joe,87
djane,Doe,Jane,98
skapors,Kaporski,Sam,92
bnye,Nye,Bill,80
bted,And Ted,Bill,83
%

Notice the grade for Bill Nye is been changed from a 72 to an 80

Note that you do not need to do anything fancy with the string matching, i.e. it doesn't matter if the string given matches the first name, last name, or a combination, e.g. this is fine:

% ./change_grade.py oe,Joe 20 <files/grades.csv
#grades for Super Awesome Demonstration

jshmoe,Shmoe,Joe,20
djane,Doe,Jane,98
skapors,Kaporski,Sam,92
bnye,Nye,Bill,72
bted,And Ted,Bill,83
%

No special checking need be performed on the value of the grade.
**Hint: You may want to use one of the scripts you've already looked at as a reference

-----Part 6-----
(10 points)
Wrap up
**No transcript file is necessary for this section
6.1) Create a *new* archive called 'midterm.tar.gz' of 'ece2524midterm' which contains all the files you created and modified.
***Make sure your RESPONSE.txt and all session transcripts are in the ['output'] directory and
***included in your archive.
***Keep modified source code (files used in part 6) in the same location as the original.
***Make sure to *preserve* the permissions of the files.
6.2) Upload 'midterm.tar.gz' to scholar as your submission to the assessment.
